program: STRUCT_KW IDENT LBRACE VOID_KW IDENT SEMI RBRACE SEMI WHILE_KW
##
## Ends in an error in state: 25.
##
## program -> decl_struct . program [ # ]
##
## The known suffix of the stack is as follows:
## decl_struct
##

<Une structure ne peux pas contenir d'instructions.>

program: STRUCT_KW IDENT LBRACE VOID_KW IDENT SEMI RBRACE WHILE_KW
##
## Ends in an error in state: 14.
##
## decl_struct -> STRUCT_KW IDENT LBRACE struct_core RBRACE . SEMI [ VOID_KW STRUCT_KW INT_KW FLOAT_KW BOOL_KW ]
##
## The known suffix of the stack is as follows:
## STRUCT_KW IDENT LBRACE struct_core RBRACE
##

<Une structure ne peux pas contenir d'instructions.>

program: STRUCT_KW IDENT LBRACE VOID_KW IDENT SEMI WHILE_KW
##
## Ends in an error in state: 18.
##
## nonempty_list(__anonymous_0) -> decl SEMI . [ RBRACE ]
## nonempty_list(__anonymous_0) -> decl SEMI . nonempty_list(__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## decl SEMI
##

<Une structure ne peux pas contenir d'instructions.>

program: STRUCT_KW IDENT LBRACE VOID_KW IDENT WHILE_KW
##
## Ends in an error in state: 17.
##
## nonempty_list(__anonymous_0) -> decl . SEMI [ RBRACE ]
## nonempty_list(__anonymous_0) -> decl . SEMI nonempty_list(__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## decl
##

<Une structure ne peux pas contenir d'instructions.>

program: STRUCT_KW IDENT LBRACE WHILE_KW
##
## Ends in an error in state: 4.
##
## decl_struct -> STRUCT_KW IDENT LBRACE . struct_core RBRACE SEMI [ VOID_KW STRUCT_KW INT_KW FLOAT_KW BOOL_KW ]
##
## The known suffix of the stack is as follows:
## STRUCT_KW IDENT LBRACE
##

<Une structure ne peux pas contenir d'instructions.>

program: STRUCT_KW IDENT WHILE_KW
##
## Ends in an error in state: 3.
##
## decl_struct -> STRUCT_KW IDENT . LBRACE struct_core RBRACE SEMI [ VOID_KW STRUCT_KW INT_KW FLOAT_KW BOOL_KW ]
## type_def -> STRUCT_KW IDENT . [ STAR IDENT ]
##
## The known suffix of the stack is as follows:
## STRUCT_KW IDENT
##

<Une structure ne peux pas contenir d'instructions.>

program: STRUCT_KW WHILE_KW
##
## Ends in an error in state: 2.
##
## decl_struct -> STRUCT_KW . IDENT LBRACE struct_core RBRACE SEMI [ VOID_KW STRUCT_KW INT_KW FLOAT_KW BOOL_KW ]
## type_def -> STRUCT_KW . IDENT [ STAR IDENT ]
##
## The known suffix of the stack is as follows:
## STRUCT_KW
##

<Une structure ne peux pas contenir d'instructions.>

program: VOID_KW IDENT LPAR RPAR LBRACE FCST WHILE_KW
##
## Ends in an error in state: 127.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## instruction -> expression . SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT LPAR RPAR LBRACE IDENT SET IDENT RPAR
##
## Ends in an error in state: 121.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## instruction -> IDENT SET expression . SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## IDENT SET expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production expression -> IDENT
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT LPAR RPAR LBRACE IDENT SET WHILE_KW
##
## Ends in an error in state: 120.
##
## instruction -> IDENT SET . expression SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## IDENT SET
##

<Une expression est attendue apres un '='.>

program: VOID_KW IDENT LPAR RPAR LBRACE IDENT WHILE_KW
##
## Ends in an error in state: 119.
##
## access -> IDENT . ext [ STAR SLASH SET SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT ARROW AND ]
## expression -> IDENT . [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## instruction -> IDENT . SET expression SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<Un identifiant ne peut pas etre suivi par un while.>

program: VOID_KW IDENT LPAR RPAR LBRACE IF_KW LPAR BOOL RPAR LBRACE RBRACE ELSE_KW WHILE_KW
##
## Ends in an error in state: 117.
##
## instruction -> IF_KW delimited_expr block ELSE_KW . block [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## IF_KW delimited_expr block ELSE_KW
##

<Les blocs internes des if et else doivent etre encadres par des accolades.>

program: VOID_KW IDENT LPAR RPAR LBRACE IF_KW LPAR BOOL RPAR LBRACE RBRACE VOID_KW
##
## Ends in an error in state: 116.
##
## instruction -> IF_KW delimited_expr block . [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
## instruction -> IF_KW delimited_expr block . ELSE_KW block [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## IF_KW delimited_expr block
##

<Une fonction ne peut pas etre definie dans une autre fonction.>

program: VOID_KW IDENT LPAR RPAR LBRACE IF_KW LPAR BOOL RPAR WHILE_KW
##
## Ends in an error in state: 115.
##
## instruction -> IF_KW delimited_expr . block [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
## instruction -> IF_KW delimited_expr . block ELSE_KW block [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## IF_KW delimited_expr
##

<Il manque une '{' apres le la condition du if.>

program: VOID_KW IDENT LPAR RPAR LBRACE IF_KW WHILE_KW
##
## Ends in an error in state: 114.
##
## instruction -> IF_KW . delimited_expr block [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
## instruction -> IF_KW . delimited_expr block ELSE_KW block [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## IF_KW
##

<Il manque une '{' apres le la condition du if.>

program: VOID_KW IDENT LPAR RPAR LBRACE PUTCHAR_KW LPAR BOOL RPAR WHILE_KW
##
## Ends in an error in state: 112.
##
## instruction -> PUTCHAR_KW delimited_expr . SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## PUTCHAR_KW delimited_expr
##

<La fonction putchar() attend un parametre de type int.>

program: VOID_KW IDENT LPAR RPAR LBRACE PUTCHAR_KW WHILE_KW
##
## Ends in an error in state: 111.
##
## instruction -> PUTCHAR_KW . delimited_expr SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## PUTCHAR_KW
##

<La fonction putchar() attend un parametre de type int.>

program: VOID_KW IDENT LPAR RPAR LBRACE RBRACE VOID_KW IDENT WHILE_KW
##
## Ends in an error in state: 29.
##
## decl_function -> decl . params fun_block [ VOID_KW STRUCT_KW INT_KW FLOAT_KW EOF BOOL_KW ]
##
## The known suffix of the stack is as follows:
## decl
##

<Les parametre d'une fonction doivent etre entre parentheses.>

program: VOID_KW IDENT LPAR RPAR LBRACE RBRACE WHILE_KW
##
## Ends in an error in state: 27.
##
## nonempty_list(decl_function) -> decl_function . [ EOF ]
## nonempty_list(decl_function) -> decl_function . nonempty_list(decl_function) [ EOF ]
##
## The known suffix of the stack is as follows:
## decl_function
##

<Les instructions doivent etre dans une fonction.>

program: VOID_KW IDENT LPAR RPAR LBRACE RETURN_KW IDENT RPAR
##
## Ends in an error in state: 109.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## instruction -> RETURN_KW expression . SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## RETURN_KW expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production expression -> IDENT
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT LPAR RPAR LBRACE RETURN_KW WHILE_KW
##
## Ends in an error in state: 108.
##
## instruction -> RETURN_KW . expression SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## RETURN_KW
##

<L'instruction return attend une expression.>

program: VOID_KW IDENT LPAR RPAR LBRACE SLASH
##
## Ends in an error in state: 38.
##
## fun_block -> LBRACE . list(decl_var_local) list(instruction) RBRACE [ VOID_KW STRUCT_KW INT_KW FLOAT_KW EOF BOOL_KW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<Le corps d'une fontion doit suivre les regles de la grammaire : definitions de variables locales, puis liste d'instructions.>

program: VOID_KW IDENT LPAR RPAR LBRACE STAR IDENT SET IDENT RPAR
##
## Ends in an error in state: 131.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## instruction -> access SET expression . SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## access SET expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production expression -> IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID_KW IDENT LPAR RPAR LBRACE STAR IDENT SET WHILE_KW
##
## Ends in an error in state: 130.
##
## instruction -> access SET . expression SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## access SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID_KW IDENT LPAR RPAR LBRACE STAR IDENT WHILE_KW
##
## Ends in an error in state: 129.
##
## access -> access . ext [ STAR SLASH SET SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT ARROW AND ]
## expression -> access . [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## instruction -> access . SET expression SEMI [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## access
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID_KW IDENT LPAR RPAR LBRACE VOID_KW IDENT SEMI SLASH
##
## Ends in an error in state: 136.
##
## list(decl_var_local) -> decl_var_local . list(decl_var_local) [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## decl_var_local
##

<Le corps d'une fontion doit suivre les regles de la grammaire : definitions de variables locales, puis liste d'instructions.>

program: VOID_KW IDENT LPAR RPAR LBRACE VOID_KW IDENT SET IDENT RPAR
##
## Ends in an error in state: 140.
##
## decl_var_local -> decl SET expression . SEMI [ WHILE_KW VOID_KW STRUCT_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR INT_KW IF_KW IDENT FLOAT_KW FCST CST BOOL_KW BOOL ADDR ]
## expression -> expression . PLUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
##
## The known suffix of the stack is as follows:
## decl SET expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production expression -> IDENT
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT LPAR RPAR LBRACE VOID_KW IDENT SET WHILE_KW
##
## Ends in an error in state: 139.
##
## decl_var_local -> decl SET . expression SEMI [ WHILE_KW VOID_KW STRUCT_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR INT_KW IF_KW IDENT FLOAT_KW FCST CST BOOL_KW BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## decl SET
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT LPAR RPAR LBRACE VOID_KW IDENT WHILE_KW
##
## Ends in an error in state: 138.
##
## decl_var_local -> decl . SEMI [ WHILE_KW VOID_KW STRUCT_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR INT_KW IF_KW IDENT FLOAT_KW FCST CST BOOL_KW BOOL ADDR ]
## decl_var_local -> decl . SET expression SEMI [ WHILE_KW VOID_KW STRUCT_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR INT_KW IF_KW IDENT FLOAT_KW FCST CST BOOL_KW BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## decl
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT LPAR RPAR LBRACE WHILE_KW LPAR IDENT RPAR LBRACE VOID_KW
##
## Ends in an error in state: 107.
##
## block -> LBRACE . list(instruction) RBRACE [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST ELSE_KW CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<Il ne peut y avoir que des instructions a l'interieur d'une boucle.>

program: VOID_KW IDENT LPAR RPAR LBRACE WHILE_KW LPAR IDENT RPAR WHILE_KW
##
## Ends in an error in state: 106.
##
## instruction -> WHILE_KW delimited_expr . block [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## WHILE_KW delimited_expr
##

<La condition d'une boucle doit etre suivie de '{'.>

program: VOID_KW IDENT LPAR RPAR LBRACE WHILE_KW LPAR WHILE_KW
##
## Ends in an error in state: 41.
##
## delimited_expr -> LPAR . expression RPAR [ SEMI LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<Il manque une parentheses fermante : ')'.>

program: VOID_KW IDENT LPAR RPAR LBRACE WHILE_KW WHILE_KW
##
## Ends in an error in state: 40.
##
## instruction -> WHILE_KW . delimited_expr block [ WHILE_KW STAR RETURN_KW RBRACE PUTCHAR_KW NOT MINUS LPAR IF_KW IDENT FCST CST BOOL ADDR ]
##
## The known suffix of the stack is as follows:
## WHILE_KW
##

<La syntaxe de definition d'une boucle doit suivre : boucle(condition){ block }.>

program: VOID_KW IDENT LPAR RPAR WHILE_KW
##
## Ends in an error in state: 37.
##
## decl_function -> decl params . fun_block [ VOID_KW STRUCT_KW INT_KW FLOAT_KW EOF BOOL_KW ]
##
## The known suffix of the stack is as follows:
## decl params
##

<La syntaxe de definition d'une boucle doit suivre : boucle(condition){ block }. >

program: VOID_KW IDENT LPAR STRUCT_KW WHILE_KW
##
## Ends in an error in state: 5.
##
## type_def -> STRUCT_KW . IDENT [ STAR RPAR IDENT ]
##
## The known suffix of the stack is as follows:
## STRUCT_KW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID_KW IDENT LPAR VOID_KW IDENT COMMA WHILE_KW
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,decl) -> decl COMMA . separated_nonempty_list(COMMA,decl) [ RPAR ]
##
## The known suffix of the stack is as follows:
## decl COMMA
##

<Les parametres de fonctions sont optionnels, mais s'il y en a, ils doivent etre separes pas des ','.>

program: VOID_KW IDENT LPAR VOID_KW IDENT WHILE_KW
##
## Ends in an error in state: 34.
##
## separated_nonempty_list(COMMA,decl) -> decl . [ RPAR ]
## separated_nonempty_list(COMMA,decl) -> decl . COMMA separated_nonempty_list(COMMA,decl) [ RPAR ]
##
## The known suffix of the stack is as follows:
## decl
##

<Les parametres de fonctions sont optionnels, mais s'il y en a, ils doivent etre separes pas des ','.>

program: VOID_KW IDENT LPAR WHILE_KW
##
## Ends in an error in state: 30.
##
## params -> LPAR . loption(separated_nonempty_list(COMMA,decl)) RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<Les parametres de fonctions sont optionnels, mais s'il y en a, ils doivent etre separes pas des ','.>

program: VOID_KW IDENT SEMI WHILE_KW
##
## Ends in an error in state: 23.
##
## program -> decl_var_glob . program [ # ]
##
## The known suffix of the stack is as follows:
## decl_var_glob
##

<Un programme est une suite de variables globales suivient d'une suite de fonctions.>

program: VOID_KW IDENT SET ADDR WHILE_KW
##
## Ends in an error in state: 53.
##
## expression -> ADDR . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## ADDR
##

<On ne peut recuperer que l'adresse d'une variable.>

program: VOID_KW IDENT SET IDENT AND FCST WHILE_KW
##
## Ends in an error in state: 97.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression AND expression . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression AND expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT AND WHILE_KW
##
## Ends in an error in state: 96.
##
## expression -> expression AND . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression AND
##

<Il ne peut y avoir que des operations entre expressions a l'interieur d'une definition de variable.>

program: VOID_KW IDENT SET IDENT ARROW IDENT WHILE_KW
##
## Ends in an error in state: 65.
##
## nonempty_list(__anonymous_2) -> ARROW IDENT . [ STAR SLASH SET SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT COMMA ARROW AND ]
## nonempty_list(__anonymous_2) -> ARROW IDENT . nonempty_list(__anonymous_2) [ STAR SLASH SET SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT COMMA ARROW AND ]
##
## The known suffix of the stack is as follows:
## ARROW IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID_KW IDENT SET IDENT ARROW WHILE_KW
##
## Ends in an error in state: 64.
##
## nonempty_list(__anonymous_2) -> ARROW . IDENT [ STAR SLASH SET SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT COMMA ARROW AND ]
## nonempty_list(__anonymous_2) -> ARROW . IDENT nonempty_list(__anonymous_2) [ STAR SLASH SET SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT COMMA ARROW AND ]
##
## The known suffix of the stack is as follows:
## ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID_KW IDENT SET IDENT DOT IDENT WHILE_KW
##
## Ends in an error in state: 62.
##
## nonempty_list(__anonymous_1) -> DOT IDENT . [ STAR SLASH SET SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT COMMA ARROW AND ]
## nonempty_list(__anonymous_1) -> DOT IDENT . nonempty_list(__anonymous_1) [ STAR SLASH SET SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT COMMA ARROW AND ]
##
## The known suffix of the stack is as follows:
## DOT IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID_KW IDENT SET IDENT DOT WHILE_KW
##
## Ends in an error in state: 61.
##
## nonempty_list(__anonymous_1) -> DOT . IDENT [ STAR SLASH SET SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT COMMA ARROW AND ]
## nonempty_list(__anonymous_1) -> DOT . IDENT nonempty_list(__anonymous_1) [ STAR SLASH SET SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT COMMA ARROW AND ]
##
## The known suffix of the stack is as follows:
## DOT
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT DOUBLE_EQ FCST WHILE_KW
##
## Ends in an error in state: 95.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression DOUBLE_EQ expression . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression DOUBLE_EQ expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT DOUBLE_EQ WHILE_KW
##
## Ends in an error in state: 94.
##
## expression -> expression DOUBLE_EQ . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression DOUBLE_EQ
##

<Une comparaison s'effectue entre deux expressions.>

program: VOID_KW IDENT SET IDENT GE FCST WHILE_KW
##
## Ends in an error in state: 93.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression GE expression . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression GE expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT GE WHILE_KW
##
## Ends in an error in state: 92.
##
## expression -> expression GE . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression GE
##

<Une comparaison s'effectue entre deux expressions.>

program: VOID_KW IDENT SET IDENT GT FCST WHILE_KW
##
## Ends in an error in state: 91.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression GT expression . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression GT expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT GT WHILE_KW
##
## Ends in an error in state: 90.
##
## expression -> expression GT . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression GT
##

<Une comparaison s'effectue entre deux expressions.>

program: VOID_KW IDENT SET IDENT LE FCST WHILE_KW
##
## Ends in an error in state: 89.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression LE expression . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression LE expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT LE WHILE_KW
##
## Ends in an error in state: 88.
##
## expression -> expression LE . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression LE
##

<Une comparaison s'effectue entre deux expressions.>

program: VOID_KW IDENT SET IDENT LPAR IDENT COMMA WHILE_KW
##
## Ends in an error in state: 98.
##
## separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expression COMMA
##

<Les parametres de fonctions sont optionnels, mais s'il y en a, ils doivent etre separes pas des ','.>

program: VOID_KW IDENT SET IDENT LPAR IDENT SEMI
##
## Ends in an error in state: 73.
##
## expression -> expression . PLUS expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## separated_nonempty_list(COMMA,expression) -> expression . [ RPAR ]
## separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAR ]
##
## The known suffix of the stack is as follows:
## expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production expression -> IDENT
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT LPAR WHILE_KW
##
## Ends in an error in state: 49.
##
## expression -> IDENT LPAR . loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## IDENT LPAR
##

<Les parametres de fonctions sont optionnels, mais s'il y en a, ils doivent etre separes pas des ','.>

program: VOID_KW IDENT SET IDENT LT FCST WHILE_KW
##
## Ends in an error in state: 87.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression LT expression . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression LT expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT LT WHILE_KW
##
## Ends in an error in state: 86.
##
## expression -> expression LT . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression LT
##

<Une comparaison s'effectue entre deux expressions.>

program: VOID_KW IDENT SET IDENT MINUS FCST WHILE_KW
##
## Ends in an error in state: 85.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression MINUS expression . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression MINUS expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT MINUS WHILE_KW
##
## Ends in an error in state: 84.
##
## expression -> expression MINUS . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression MINUS
##

<Une operation s'effectue entre deux expressions.>

program: VOID_KW IDENT SET IDENT NEQ FCST WHILE_KW
##
## Ends in an error in state: 83.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression NEQ expression . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression NEQ expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT NEQ WHILE_KW
##
## Ends in an error in state: 82.
##
## expression -> expression NEQ . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression NEQ
##

<Une comparaison s'effectue entre deux expressions.>

program: VOID_KW IDENT SET IDENT OR FCST WHILE_KW
##
## Ends in an error in state: 81.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression OR expression . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression OR expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT OR WHILE_KW
##
## Ends in an error in state: 80.
##
## expression -> expression OR . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression OR
##

<Une comparaison s'effectue entre deux expressions.>

program: VOID_KW IDENT SET IDENT PLUS FCST WHILE_KW
##
## Ends in an error in state: 79.
##
## expression -> expression . PLUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression PLUS expression . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression PLUS expression
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT PLUS WHILE_KW
##
## Ends in an error in state: 78.
##
## expression -> expression PLUS . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression PLUS
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT RPAR
##
## Ends in an error in state: 146.
##
## decl_var_glob -> decl SET expression . SEMI [ VOID_KW STRUCT_KW INT_KW FLOAT_KW BOOL_KW ]
## expression -> expression . PLUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . MINUS expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . STAR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . SLASH expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GT expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GE expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . AND expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . OR expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . NEQ expression [ STAR SLASH SEMI PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
##
## The known suffix of the stack is as follows:
## decl SET expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production expression -> IDENT
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET IDENT SLASH WHILE_KW
##
## Ends in an error in state: 76.
##
## expression -> expression SLASH . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression SLASH
##

<Une operation s'effectue entre deux expressions.>

program: VOID_KW IDENT SET IDENT STAR WHILE_KW
##
## Ends in an error in state: 74.
##
## expression -> expression STAR . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## expression STAR
##

<Une operation s'effectue entre deux expressions.>

program: VOID_KW IDENT SET IDENT WHILE_KW
##
## Ends in an error in state: 48.
##
## access -> IDENT . ext [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT COMMA ARROW AND ]
## expression -> IDENT . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
## expression -> IDENT . LPAR loption(separated_nonempty_list(COMMA,expression)) RPAR [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET LPAR BOOL_KW RPAR WHILE_KW
##
## Ends in an error in state: 58.
##
## expression -> cast . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## cast
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID_KW IDENT SET LPAR IDENT SEMI
##
## Ends in an error in state: 103.
##
## delimited_expr -> LPAR expression . RPAR [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE LBRACE GT GE DOUBLE_EQ COMMA AND ]
## expression -> expression . PLUS expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . MINUS expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . STAR expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . SLASH expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LT expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . LE expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GT expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . GE expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . AND expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . OR expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . DOUBLE_EQ expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
## expression -> expression . NEQ expression [ STAR SLASH RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ AND ]
##
## The known suffix of the stack is as follows:
## LPAR expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production expression -> IDENT
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET LPAR VOID_KW WHILE_KW
##
## Ends in an error in state: 101.
##
## cast -> LPAR type_def . RPAR [ STAR NOT MINUS LPAR IDENT FCST CST BOOL ADDR ]
## type_def -> type_def . STAR [ STAR RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR type_def
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID_KW IDENT SET LPAR WHILE_KW
##
## Ends in an error in state: 47.
##
## cast -> LPAR . type_def RPAR [ STAR NOT MINUS LPAR IDENT FCST CST BOOL ADDR ]
## delimited_expr -> LPAR . expression RPAR [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<Un varible ne peut etre definie qu'a partir d'expressions.>

program: VOID_KW IDENT SET MINUS WHILE_KW
##
## Ends in an error in state: 45.
##
## expression -> MINUS . CST [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<Un varible ne peut etre definie qu'a partir d'expressions.>

program: VOID_KW IDENT SET NOT WHILE_KW
##
## Ends in an error in state: 44.
##
## expression -> NOT . expression [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

<Un varible ne peut etre definie qu'a partir d'expressions.>

program: VOID_KW IDENT SET STAR IDENT WHILE_KW
##
## Ends in an error in state: 60.
##
## access -> access . ext [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ DOT COMMA ARROW AND ]
## expression -> access . [ STAR SLASH SEMI RPAR PLUS OR NEQ MINUS LT LE GT GE DOUBLE_EQ COMMA AND ]
##
## The known suffix of the stack is as follows:
## access
##

<YOUR SYNTAX ERROR MESSAGE HERE>

program: VOID_KW IDENT SET STAR WHILE_KW
##
## Ends in an error in state: 42.
##
## nonempty_list(STAR) -> STAR . [ IDENT ]
## nonempty_list(STAR) -> STAR . nonempty_list(STAR) [ IDENT ]
##
## The known suffix of the stack is as follows:
## STAR
##

<Un ';' est attendu a la fin d'une expression.>

program: VOID_KW IDENT SET WHILE_KW
##
## Ends in an error in state: 145.
##
## decl_var_glob -> decl SET . expression SEMI [ VOID_KW STRUCT_KW INT_KW FLOAT_KW BOOL_KW ]
##
## The known suffix of the stack is as follows:
## decl SET
##

<Un varible ne peut etre definie qu'a partir d'expressions.>

program: VOID_KW IDENT WHILE_KW
##
## Ends in an error in state: 144.
##
## decl_function -> decl . params fun_block [ VOID_KW STRUCT_KW INT_KW FLOAT_KW EOF BOOL_KW ]
## decl_var_glob -> decl . SEMI [ VOID_KW STRUCT_KW INT_KW FLOAT_KW BOOL_KW ]
## decl_var_glob -> decl . SET expression SEMI [ VOID_KW STRUCT_KW INT_KW FLOAT_KW BOOL_KW ]
##
## The known suffix of the stack is as follows:
## decl
##

<Un varible ne peut etre definie qu'a partir d'expressions.>

program: VOID_KW WHILE_KW
##
## Ends in an error in state: 10.
##
## decl -> type_def . IDENT [ SET SEMI RPAR LPAR COMMA ]
## type_def -> type_def . STAR [ STAR IDENT ]
##
## The known suffix of the stack is as follows:
## type_def
##

<Un varible ne peut etre definie qu'a partir d'expressions.>

program: WHILE_KW
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
##
##

<Un programme est une suite de variables globales suivient d'une suite de fonctions.>

